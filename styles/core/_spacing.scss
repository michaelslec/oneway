// spacing.scss - Governs margins, borders, and padding
.display-block {
    display: block;
}

.display-inline-block {
    display: inline-block;
}

.display-inline-flex {
    display: inline-flex;
}

// Base Spacing Classes
.m-none {
    margin: 0 !important;
}

.mx-auto {
    margin-left: auto;
    margin-right: auto;
}

.my-auto {
    margin-top: auto;
    margin-bottom: auto;
}

.p-none {
    padding: 0 !important;
}

$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    ) !default;

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name
);
@return if($min !=0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);

    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }

    @else {
        @content;
    }
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints)==null, "", "-#{$name}");
}

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Generate spaces in increments of 25 from 800 to 0...
        @each $spacer,
        $abbrev in (margin: m, padding: p) {
            $amt: 12800;

            @while $amt >=0 {

                // Omni-directional Spacing (.m-100)
                .#{$abbrev}#{$infix}-#{$amt} {
                    #{$spacer}: #{calc($amt/100)}rem;
                }

                // Horizontal Spacing (.mx-100)
                .#{$abbrev}x#{$infix}-#{$amt} {
                    #{$spacer}-left: #{calc($amt/100)}rem;
                    #{$spacer}-right: #{calc($amt/100)}rem;
                }

                // Vertical Spacing (.my-100)
                .#{$abbrev}y#{$infix}-#{$amt} {
                    #{$spacer}-top: #{calc($amt/100)}rem;
                    #{$spacer}-bottom: #{calc($amt/100)}rem;
                }

                // Unidirectional (.mr-100);
                @each $direction,
                $d-abbrev in (top: t, right: r, bottom: b, left: l) {
                    .#{$abbrev}#{$d-abbrev}#{$infix}-#{$amt} {
                        #{$spacer}-#{$direction}: #{calc($amt/100)}rem;
                    }
                }

                $amt: $amt - 25;
            }
        }
    }
}